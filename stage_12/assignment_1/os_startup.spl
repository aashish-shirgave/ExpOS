//loading disk block to memory pages

loadi(69,11);   // idle process
loadi(70,12);

loadi(4,17);    // timer
loadi(5,18);

loadi(16,29);   // int_7
loadi(17,30);

loadi(65,7);    // init process
loadi(66,8);

loadi(22,35);   // int_10
loadi(23,36);

loadi(2, 15);   // exhandler
loadi(3, 16);

loadi(63,13);   // library
loadi(64,14);



// Idle process with pid 0

PTBR=PAGE_TABLE_BASE;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 85;
[PTBR+5] = "0110";
[PTBR+6] = 86;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

PTLR = 10;

//for idle process
[PROCESS_TABLE + 11] = 82;                  // User area page number (used for kernal stack on which current stage of registers is stored)
[PROCESS_TABLE + 4] = CREATED;              // Status
[PROCESS_TABLE + 13] = 8*512;               // User stack pointer (UPTR)
[PROCESS_TABLE + 12] = 0;                   // Kernal stack pointer (KPTR)
[PROCESS_TABLE + 1] = 0;                    // PID
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;     // PTBR value
[PROCESS_TABLE + 15] = 10;                  // PTLR value

[81 * 512] = [69*512 + 1];


//For Init Process

PTBR=PAGE_TABLE_BASE+20;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


PTLR = 10;
SP = 8*512;

[PROCESS_TABLE +16 + 1] = 1;            
[PROCESS_TABLE +16 +  4] = RUNNING;
[PROCESS_TABLE +16 + 11] = 80;
[PROCESS_TABLE +16 + 13] = 8*512;
[PROCESS_TABLE +16 + 12] = 0;
[PROCESS_TABLE +16 + 14] = PAGE_TABLE_BASE + 20;   // PTBR value
[PROCESS_TABLE +16 + 15] = 10;                     // PTLR value

[76*512] = [65 * 512 + 1];

[SYSTEM_STATUS_TABLE + 1] = 1;

ireturn;
