alias funNo R1;
alias currentPID R2;

// Disk Load
if (funNo == 2) then		

	alias pageNo R3;
	alias blockNo R4;

	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1 = 3;
	call MOD_0;							
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);

	[DISK_STATUS_TABLE+1] = 0;			
	load(pageNo,blockNo);

    //change the status

	[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_DISK;

	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	call MOD_5;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);
	return;

endif;

// Read function
if (funNo == 4) then				
	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	R1 = 8;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);

	read;
	[PROCESS_TABLE + currentPID * 16 + 4] = WAIT_TERMINAL;

	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	call MOD_5;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);

	alias logicaladd R3;
	alias offset R4;
	alias lpage R5;
	offset = logicaladd % 512;
	lpage = logicaladd / 512;
	[([PTBR + 2*lpage])*512 + offset] = [PROCESS_TABLE + currentPID * 16 + 8];
	return;

endif;

// Write function
if (funNo == 3) then			

	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	funNo = 8;
	currentPID = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);

	alias word R3;
	print word;

	multipush(R1,R2,R3,R4,R5,R6,R7,R8);
	funNo = 9;
	call MOD_0;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8);

	return;

endif;

return;
