//loading different interrupt

//load --int=timer path
loadi(4, 17);
loadi(5, 18);

//load --int=10 path
loadi(22,35);
loadi(23,36);

//load --exhandler path
loadi(2, 15);
loadi(3, 16);



//Loading the init program from disk to memory
//load --init path

loadi(65,7);
loadi(66,8);

//Loading Library code 
//load --library ../expl/library.lib

loadi(63,13);
loadi(64,14);


 PTBR = PAGE_TABLE_BASE;
 PTLR = 10;

//the first available free page is 80, the User Area page is allocated at the physical page number 80.
// The SPL constant PROCESS_TABLE points to the starting address(28672) of the Process Table. 

[PROCESS_TABLE + 11] = 80;

// we are using the first Process Table entry, the PID will be 0

[PROCESS_TABLE + 1] = 0;



[SYSTEM_STATUS_TABLE + 1] = 0;



//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";


//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";


//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


//Setting up SP to logical page address 8
SP = 8 * 512;

//This logical page 8 stored in physical page 76 of memory. Setting up top of stack to IP
[76*512] = [65 * 512 + 1];

ireturn;
