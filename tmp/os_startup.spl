//loading disk block to memory pages

loadi(69,11);   // idle process
loadi(70,12);

//load boot module
loadi(54,67);
loadi(55,68);


SP = 82*512 - 1;
call BOOT_MODULE;

// Idle process with pid 0 (101 to 200)

PTBR=PAGE_TABLE_BASE;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 85;
[PTBR+5] = "0110";
[PTBR+6] = 86;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

PTLR = 10;

//for idle process
[PROCESS_TABLE + 11] = 82;                  // User area page number (used for kernal stack on which current stage of registers is stored)
[PROCESS_TABLE + 4] = RUNNING;              // Status
[PROCESS_TABLE + 13] = 8*512;               // User stack pointer (UPTR)
[PROCESS_TABLE + 12] = 0;                   // Kernal stack pointer (KPTR)
[PROCESS_TABLE + 1] = 0;                    // PID
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;     // PTBR value
[PROCESS_TABLE + 15] = 10;                  // PTLR value

[81 * 512] = [69*512 + 1];

PTBR=PAGE_TABLE_BASE;
SP = 8*512;

[SYSTEM_STATUS_TABLE + 1] = 0;

ireturn;

